import time
import openai
import json
from tqdm import tqdm
import os
import cv2
import base64
from tqdm import tqdm


def chat(image_path):
    # openai.api_base = "https://api.942ai.com/v1"
    openai.api_key=""
    

    # Convert the image to Base64
    with open(image_path, "rb") as img_file:
        img_base64 = base64.b64encode(img_file.read()).decode("utf-8")

  


    messages = [
        {
            "role": "system",
            "content": """
            The image you will receive is composed of two parts: (1) The top section is the original image. (2) The bottom section is generated by a model after image generation. Please evaluate the modelâ€™s image generation capabilities based on the following two criteria:

            (1) Visual Quality (Score: 0-5): Assign a higher score if the generated image (the bottom section) has better visual quality including better clarity, lower noise, higher color accuracy and higher Edge Preservation.
   
            (2) Textual Fidelity (Score: 0-5): Firstly recognize the texts in the generated image (the bottom section) and recognize the texts in the original image (the top section). Then, assign a higher score if the words are closely matched (including text content and text positions).

            Output the evaluation strictly in the following JSON format without any additional explanation or comments:
            {'Visual Quality: score_visual, 'Textual Fidelity': score_text, 'total_score': score_visual + score_text}
            """
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "image_url",
                    "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}
                },
            ],
        }
    ]




    response = openai.ChatCompletion.create(model="gpt-4o",messages=messages,temperature=0)
    # response_message = completion["choices"][0]["message"]["content"]
    return response.choices[0].message['content']





if __name__ == '__main__':
    folder="data/controlnet"
    new_folder="evaluation_results/controlnet"

    if not os.path.exists(new_folder):
        os.makedirs(new_folder)

    image_list=os.listdir(folder)
    file_list=os.listdir(new_folder)

    for i in tqdm(image_list):
        if i.replace("jpg","json") in file_list:
            continue
        save_dict={}
        print("########",i)
        image_path=os.path.join(folder,i)
        response=chat(image_path)
        print(response)
        save_dict[i]=response
        with open(os.path.join(new_folder,i.replace(".jpg",".json")),"w") as f:
            json.dump(save_dict,f)