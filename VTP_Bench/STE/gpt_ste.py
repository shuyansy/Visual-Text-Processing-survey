import time
import openai
import json
from tqdm import tqdm
import os
import cv2
import base64
from tqdm import tqdm


def chat(image_path,word):
    openai.api_base = "https://api.942ai.com/v1"
    openai.api_key = ""
    

    # Convert the image to Base64
    with open(image_path, "rb") as img_file:
        img_base64 = base64.b64encode(img_file.read()).decode("utf-8")

  


    messages = [
        {
            "role": "system",
            "content": """
            The image you will receive is composed of two parts: (1) The top section contains the original image. (2) The bottom section is generated by a model after image editing. Please evaluate the modelâ€™s image editing capabilities based on the following two criteria:

            (1) Visual Similarity (Score: 0-5): Assign a higher score if the generated image (the bottom section) closely resembles the original image (the top section) in terms of visual elements such as background color, font style, font color, and texture.
            (2) Textual Fidelity (Score: 0-5): Firstly recognize the texts in the generated image (the bottom section) and assign a higher score if the words in the generated image closely match the given target text.

            Output the evaluation strictly in the following JSON format without any additional explanation or comments:
            {'Visual Similarity: score_visual, 'Textual Fidelity': score_text, 'total_score': score_visual + score_text}
            """
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text":  f"target text: {word}"
                },
                {
                    "type": "image_url",
                    "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}
                },
            ],
        }
    ]




    response = openai.ChatCompletion.create(model="gpt-4o",messages=messages,temperature=0)
    return response.choices[0].message['content']





if __name__ == '__main__':
    folder="STE_data/DiffSTE"
    gt="ScenePair/select.txt"
    with open(gt,"r") as f:
        texts=f.readlines()
    
    dic={}
    for i in texts:
        textline=i.split()
        dic[textline[0]]=textline[1]


    new_folder="./evaluation_results/DiffSTE"

    if not os.path.exists(new_folder):
        os.makedirs(new_folder)

    for i in tqdm(dic):
        save_dict={}
        print(i,dic[i])

        # if i.replace(".png",".json") in os.listdir(new_folder):
        #     continue

   
        image_path=os.path.join(folder,i)
        response=chat(image_path,dic[i])
        print(response)
        save_dict[i]=response
        with open(os.path.join(new_folder,i.replace(".png",".json")),"w") as f:
            json.dump(save_dict,f)