import time
import openai
import json
from tqdm import tqdm
import os
import cv2
import base64
from tqdm import tqdm


def chat(image_path):
    # openai.api_base = "https://api.942ai.com/v1"
    openai.api_key=""
    

    # Convert the image to Base64
    with open(image_path, "rb") as img_file:
        img_base64 = base64.b64encode(img_file.read()).decode("utf-8")

  


    messages = [
        {
            "role": "system",
            "content": """
            The image you will receive is composed of two parts: (1) The top section is the original image. (2) The bottom section is generated by a model after scene text removal. Please evaluate the modelâ€™s text removal capabilities based on the following two criteria:

            (1) Text Erasure Degree (Score: 0-5):  Assign a higher score if less visible text remains. 
   
            (2) Visual Quality (Score: 0-5): Assign a higher score if the image is visually restored with minimal distortions. Especially the removal area is visually matched with the original image.

            Output the evaluation strictly in the following JSON format without any additional explanation or comments:
            {'Text Erasure Degree': score_text, 'Visual Quality: score_visual, 'total_score': score_text + score_visual}
            """
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "image_url",
                    "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}
                },
            ],
        }
    ]




    response = openai.ChatCompletion.create(model="gpt-4o",messages=messages,temperature=0)
    # response_message = completion["choices"][0]["message"]["content"]
    return response.choices[0].message['content']





if __name__ == '__main__':
    folder="STR_data/ctrnet"
    new_folder="./evaluation_results/ctrnet"

    if not os.path.exists(new_folder):
        os.makedirs(new_folder)

    image_list=os.listdir(folder)
    print(len(image_list))
    file_list=os.listdir(new_folder)

    for i in tqdm(image_list):
        if i.replace("png","json") in file_list:
            continue
        save_dict={}
        print("########",i)
        image_path=os.path.join(folder,i)
        response=chat(image_path)
        print(response)
        save_dict[i]=response
        with open(os.path.join(new_folder,i.replace(".png",".json")),"w") as f:
            json.dump(save_dict,f)